@startuml

class Empresa {
  {static} - cantSedeProvincia: int
  {static} - instance: Empresa
  - Empresa()
  - sedes: List<Sede>
  - productosQuimicos: List<ProductoQuimico>
  - empleados: List<Empleado>
  - tiposPeligro: List<TipoPeligro>
  - perfiles: List<PerfilTecnico>
  {static} + getInstance(): Empresa
  + agregarUsuario(string): Usuario
  + asociarRolUsuario(Rol, Usuario)
  + agregarRol(string, double) /'nombrePuesto, sueldo'/
  + modificarRol(int, double) /'idPuesto, sueldo'/
  + agregarTipoPeligro(string, double): int
  + modificarTipoPeligro(int, double): void
  + reservar(PruebaLote, LocalDate, Turno): void
  + habilitarLote(PruebaLote) : void
  + crearProductoQuimico(Map<ElementoQuimico, Integer>, String, TipoProducto, Set<TipoPeligro>): ProductoQuimico
  + crearLaboratorio(Sede, int, Set<TipoPeligro>): Laboratorio
  + modificarLaboratorio(int, Set<TipoPeligro>): Laboratorio
  + agendarPrueba(Laboratorio, PruebaLote): PruebaLote
  + registrarUsuarioPrueba(Usuario, PruebaLote): boolean
}

class Sede {
  - administrativo: EmpleadoAdministrativo
  - laboratorios: List<Laboratorio>
  - provincia: Provincia

  + agregarLaboratorio(): Laboratorio
  + modificarLaboratorio(): Laboratorio
  + agendarPrueba(Laboratorio, PruebaLote): PruebaLote
  + listarLaboratorios(): List<Laboratorio>
  # buscarLaboratorio(int): Laboratorio
}

enum Provincia {
  BUENOS_AIRES
  JUJUY
  etc
}

class ProductoQuimico {
  - id: int
  - formula: Map<ElementoQuimico, Integer>
  - nombreComercial: String
  - tipoProducto: TipoProducto
  - peligro: Set<TipoPeligro>

  + esMismoTipo(ProductoQuimico): boolean
}

class PruebaLote {
  - idProductoQuimico: int
  - fechaFabricacion: LocalDate
  - responsable: Usuario
  - ayudantes: Set<Usuario>
  - estrategiaVencimiento: EstrategiaVencimiento
  - estado: EstadoLote
  + calcularFechaVencimiento(): LocalDate
  + calcularCostoPrueba(): double
  + registrarAyudante(Usuario): void
  + establecerEstrategiaVencimiento(EstragiaVencimiento): void
  + habilitar(): void
}

interface EstrategiaVencimiento {
  + calcularVencimiento(PruebaLote)
}

class CriterioPeligrosidad implements EstrategiaVencimiento {}
class CriterioProducto implements EstrategiaVencimiento {}
class CriterioMolecular implements EstrategiaVencimiento {}


enum TipoProducto {
  LIMPIEZA
  PERFUMERIA
  MEDICAMENTO
}

enum EstadoLote {
  PENDIENTE
  ACEPTADO
  RECHAZADO
  FINALIZADO
}

enum Turno {
  '0 a 6hs'
  MADRUGADA
  '8 a 14hs'
  MAÑANA
  '16 a 22hs'
  TARDE
}

class ElementoQuimico {
  + nroAtomico: int
  + simbolo: String
  + nombre: String
  << constructor >> ElementoQuimico(int, String, String)
}

abstract class Empleado {
  - id: int
  - nombre: String

  + soyTecnico(): boolean
  + soyAdministrativo(): boolean
  + soySoporte(): boolean
  + soyGerente(): boolean
}

'Edita todo lo relacionado con los puestos y gesetion del sistema (SysAdmin)
interface RolSoporte {
  crearUsuario()
  crearPerfil()
  modificarPerfil()
  crearLaboratorio()
  modificarLaboratorio()
  crearSede()
}

'Encargado de habilitar los empleados y laboratorios para las sedes
interface RolAdministrativo {
  darAltaEmpleado(int)
  darAltaLaboratorio()
}

'Encargado de habilitar lotes y cambiar criterios de vencimiento
interface RolGerente {
  crearLote()
  editarLote()
  cambiarCriterioVencimiento(Lote)
}

'Encargado de realizar pruebas/reservas
interface RolTecnico {
  realizarPrueba()
  reservarLaboratorio()
  diagnosticarPrueba()
}

class EmpleadoSoporte extends Empleado implements RolSoporte {}
class EmpleadoAdministrativo extends Empleado implements RolAdministrativo {}
class EmpleadoGerente extends Empleado implements RolGerente {}
class EmpleadoTecnico extends Empleado implements RolTecnico {
  - categoria: PerfilTecnico
  - contadorReservasMesActual: int
}

class PerfilTecnico {
  - id: int
  - sueldo: double
  - nombre: string
  - maxReservas: int
}

' Se puede reservar si: '
' - Cantidad de personas de mi prueba es <= la cantidad personas que tiene la prueba'
'   ya existente '
' - Toxicidades sean compatibles entre producto y laboratorio '
' - Tipo de producto compatible entre pruebas '
class Laboratorio {
  - pruebas: Map<FechaTurno, PruebaLote[]>
  - jefePrueba: EmpleadoTecnico
  - ayudantes: List<EmpleadoTecnico>
  - capacidadPersonas: int
  - peligrosPermitidos: Set<TipoPeligro>
  'disponible devuelve true si hay una lugar disponible para una nueva prueba y,
  'en caso de haber otra prueba en curso, si el producto es compatible con mi prueba'
  + disponible(PruebaLote, LocalDate, Turno): boolean
  + reservar(PruebaLote, LocalDate, Turno): void
  + calcularCostoPruebaTotal(PruebaLote)
  + establecerPeligrosPermitidos(Set<TipoPeligros>)
}

class FechaTurno {
  fecha: LocalDate
  turno: Turno
}

class TipoPeligro {
  - id: int
  - nombre: String
  - costo: double
  + <<constructor>> TipoPeligro()
}

Empresa "1" *--	"∞" Sede
Sede "1" *-- "∞" Laboratorio
Sede --- Provincia
Laboratorio "1" o-- "∞" TipoPeligro
Empresa "1" *-- "∞" TipoPeligro
ProductoQuimico --- TipoProducto
ProductoQuimico "1" o-- "∞" TipoPeligro
ProductoQuimico "1" --o "∞" PruebaLote
PruebaLote --- EstadoLote
Laboratorio "1" o-- "∞" FechaTurno
FechaTurno --- Turno
Laboratorio "1" *-- "∞" PruebaLote
ProductoQuimico "1" o-- "∞" ElementoQuimico
Empresa "1" *-- "∞" Empleado
PruebaLote "1" *-- "1" EstrategiaVencimiento
EmpleadoTecnico "1" o-- "1" PerfilTecnico
Empresa "1" *-- "∞" PerfilTecnico
Sede "1" *-- "1" EmpleadoAdministrativo

@enduml