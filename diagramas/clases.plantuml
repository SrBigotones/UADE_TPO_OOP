@startuml

class Empresa {
  {static} - cantSedeProvincia: int
  {static} - instance: Empresa
  - Empresa()
  - sedes: List<Sede>
  - productosQuimicos: List<ProductoQuimico>
  - empleados: List<Empleado>
  - tiposPeligro: List<TipoPeligro>
  - perfiles: List<PerfilTecnico>
  - estrategiasVencimiento: List<EstrategiaVencimiento>
  
  - buscarEmpleado(int): Empleado
  - sedePorProvincia(Provincia): int
  {static} + getInstance(): Empresa
  /' Empleado administrativo '/
  + asociarPerfilEmpleado(int, int) /'id de perfil, id de empleado'/
  + agregarEmpleado(string, PerfilTecnico): Empleado
  + agregarPerfil(string, double, int) /'nombrePuesto, sueldo, maxReservas'/
  + modificarPerfil(int, double, int) /'idPuesto, sueldo, maxReservas'/
  + agregarTipoPeligro(string, double): int
  + modificarTipoPeligro(int, double): void
  + crearLaboratorio(int, int, Set<TipoPeligro>): Laboratorio /'idSede, capacidadPersonas'/
  + modificarLaboratorio(int, Set<TipoPeligro>): int /'capacidadPersonas'/

  /' Empleado tecnico '/
  + reservar(PruebaLote, FechaTurno, Sede): void
  + diagnosticarPrueba(int, boolean): void /'idLote, aprobacion'/
  + crearProductoQuimico(Map<ElementoQuimico, Integer>, String, TipoProducto, Set<TipoPeligro>): ProductoQuimico
  
  + registrarEmpleadoPrueba(EmpleadoTecnico, int): boolean /'id de prueba'/
  + agregarSede(Provincia): void
  + asignarEmpleadoAdministrivoASede(int, int): void /'idSede, idEmpleado'/
  + establecerEstrategiaVencimiento(int, EstrategiaVencimiento): void /'id de prueba'/
  
  /' Gerente '/
  + cambiarCriterioVencimiento(int , EstrategiaVencimiento): void /'idLote'/
  + confirmarLote(int) : void /'idLote'/
  + listarEstrategiasVencimiento(): List<EstrategiasVencimiento>
}

class Sede {
  - id: int
  - administrativo: EmpleadoAdministrativo
  - laboratorios: List<Laboratorio>
  - provincia: Provincia

  + agregarLaboratorio(Laboratorio): void
  + agendarPrueba(PruebaLote, FechaTurno): void
  + asignarEmpleadoAdministrativo(EmpleadoAdministrativo)
  + listarLaboratorios(): List<Laboratorio>
  + buscarLaboratorio(int): Laboratorio
}

enum Provincia {
  BUENOS_AIRES
  JUJUY
  etc
}

class ProductoQuimico {
  - id: int
  - formula: Map<ElementoQuimico, Integer>
  - nombreComercial: String
  - tipoProducto: TipoProducto
  - peligros: Set<TipoPeligro>

  + esMismoTipo(ProductoQuimico): boolean
}

class PruebaLote {
  - id: int
  - idProductoQuimico: int
  - fechaFabricacion: LocalDate
  - responsable: EmpleadoTecnico
  - ayudantes: Set<EmpleadoTecnico>
  - estrategiaVencimiento: EstrategiaVencimiento
  - estado: EstadoLote
  + calcularFechaVencimiento(): LocalDate
  + calcularCostoPrueba(): double
  + registrarAyudante(EmpleadoTecnico): void
  + establecerEstrategiaVencimiento(EstragiaVencimiento): void
  + habilitar(): void
  + <<constructor>> PruebaLote(int, EmpleadoTecnico)
}

abstract class EstrategiaVencimiento {
  - id: int
  - descripcion: String
  - <<constructor>> EstrategiaVencimiento(String) /'descripcion'/
  + esPorId(int): boolean
  + {abstract} calcularVencimiento(PruebaLote)
}

class CriterioPeligrosidad extends EstrategiaVencimiento {}
class CriterioProducto extends EstrategiaVencimiento {}
class CriterioMolecular extends EstrategiaVencimiento {}


enum TipoProducto {
  LIMPIEZA
  PERFUMERIA
  MEDICAMENTO
}

enum EstadoLote {
  PENDIENTE
  ACEPTADO
  RECHAZADO
  FINALIZADO
}

enum Turno {
  '0 a 6hs'
  MADRUGADA
  '8 a 14hs'
  MAÑANA
  '16 a 22hs'
  TARDE
}

enum ElementoQuimico {
  HIERRO
  SODIO
  CALCIO
  AZUFRE
  + nroAtomico: int
  + simbolo: String
  + nombre: String
  - << constructor >> ElementoQuimico(int, String, String)
}

abstract class Empleado {
  - id: int
  - nombre: String

  + soyTecnico(): boolean
  + soyAdministrativo(): boolean
  + soySoporte(): boolean
  + soyGerente(): boolean
}

'Edita todo lo relacionado con los puestos y gesetion del sistema (SysAdmin)
class EmpleadoSoporte extends Empleado {}

'Encargado de habilitar los empleados y laboratorios para las sedes
class EmpleadoAdministrativo extends Empleado {}

'Encargado de habilitar lotes y cambiar criterios de vencimiento
class EmpleadoGerente extends Empleado {}

'Encargado de realizar pruebas/reservas
class EmpleadoTecnico extends Empleado {
  - perfil: PerfilTecnico
  - contadorReservasMesActual: int
  + diagnosticarPrueba(PruebaLote): void
  
}

class PerfilTecnico {
  - id: int
  - sueldo: double
  - nombre: string
  - maxReservas: int
  + esPerfil(int): boolean /'idPerfil'/
}

' Se puede reservar si: '
' - Cantidad de personas de mi prueba es <= la cantidad personas que tiene la prueba'
'   ya existente '
' - Toxicidades sean compatibles entre producto y laboratorio '
' - Tipo de producto compatible entre pruebas '
class Laboratorio {
  - id: int
  - pruebas: Map<FechaTurno, PruebaLote[]>
  - capacidadPersonas: int
  - peligrosPermitidos: Set<TipoPeligro>
  'disponible devuelve true si hay una lugar disponible para una nueva prueba y,
  'en caso de haber otra prueba en curso, si el producto es compatible con mi prueba'
  + disponible(PruebaLote, FechaTurno): boolean
  + reservar(PruebaLote, FechaTurno): void
  + calcularCostoPruebaTotal(int)
  + establecerPeligrosPermitidos(Set<TipoPeligros>): void
}

class FechaTurno {
  fecha: LocalDate
  turno: Turno
}

class TipoPeligro {
  - id: int
  - nombre: String
  - costo: double
  + <<constructor>> TipoPeligro()
}

Empresa "1" *--	"∞" Sede
Sede "1" *-- "∞" Laboratorio
Sede --- Provincia
Laboratorio "1" o-- "∞" TipoPeligro
Empresa "1" *-- "∞" TipoPeligro
ProductoQuimico --- TipoProducto
ProductoQuimico "1" o-- "∞" TipoPeligro
ProductoQuimico "1" --o "∞" PruebaLote
PruebaLote --- EstadoLote
Laboratorio "1" o-- "∞" FechaTurno
FechaTurno --- Turno
Laboratorio "1" *-- "∞" PruebaLote
ProductoQuimico "1" o-- "∞" ElementoQuimico
Empresa "1" *-- "∞" Empleado
PruebaLote "1" o-- "1" EstrategiaVencimiento
EmpleadoTecnico "1" o-- "1" PerfilTecnico
Empresa "1" *-- "∞" PerfilTecnico
Sede "1" o-- "1" EmpleadoAdministrativo
PruebaLote "1" --o "∞" EmpleadoTecnico
Empresa "1" *-- "∞" EstrategiaVencimiento

@enduml
