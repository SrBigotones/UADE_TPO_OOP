@startuml

class Empresa extends Entidad{
   {static} - CANT_SEDE_PROVINCIA: int
  
  - sedes: List<Sede>
  - productosQuimicos: List<ProductoQuimico>
  - empleados: List<Empleado>
  - tiposPeligro: List<TipoPeligro>
  - perfiles: List<PerfilTecnico>
  - tiposProductos: List<TipoProducto>
  
  {static} - instance: Empresa
  - Empresa()
  {static} + getInstance(): Empresa
  
  - buscarEmpleado(int): Empleado /' id de Empleado'/
  - buscarSede(int): Sede /' id de Sede '/
  - buscarProductoQuimico(int): ProductoQuimico /' id de Producto Quimico '/
  - buscarPerfiltecnico(int): PerfilTecnico /' id de Perfil Tecnico '/
  - buscarTipoPeligro(int): TipoPeligro /' id de Tipo de Peligro '/
  - sedePorProvincia(Provincia): int 
 
  /' Metodos para Empleado Soporte '/
  + asociarPerfilEmpleado(int, int) /'id de perfil, id de empleado'/
  + crearEmpleadoTecnico(String, String, int, int): EmpleadoTecnico /' nombre, username, idPerfil, idSedePertence '/ 
  + crearEmpleadoAdministrativo(String, String, int): EmpleadoAdministrativo /' nombre, username, idSedePertenece '/ 
  + crearEmpleadoSoporte(String, String): EmpleadoSoporte /' nombre, username '/
  + crearEmpleadoGerente(String, String, idSedePertenece): EmpleadoGerente /' nombre, username, idSedePertenece '/
  + crearPerfil(String, double, int): PerfilTecnico /' nombre, sueldo, maxReservas '/
  + modificarPerfil(int, double, int): PerfilTecnico /' idPerfil, sueldo, maxReservas'/
  + crearTipoPeligro(String, double, int): TipoPeligro /' nombre, costo, diasVencimiento '/
  + modificarTipoPeligro(int, double): TipoPeligro /' idPeligro, costo '/
  + crearLaboratorio(int, List<Integer>, int): Laboratorio /'idSede, capacidadPersonas'/
  + modificarLaboratorio(int, int, int, Set<TipoPeligro>): Laboratorio /'idLaboratorio, idSede, capacidadPersonas, tipoPeligros'/
  + crearSede(Provincia): Sede

  /' Metodos para Empleado Tecnico '/
  + reservar(int, int, int, Fechaturno, int): PruebaLote /' idProdQuimico, cantidadAuxiliares, idEmpleadoResponsable, fechaTurno, idLaboratorio '/
  + finalizarPrueba(int, int, int, EstadoLote, EstrategiaVencimiento) /' idSede, idLaboratorio, idLote, estado, estrategiaVencimiento '/
  + crearProductoQuimico(Map<ElementoQuimico, Integer>, String, TipoProducto, List<Integer>): ProductoQuimico /' conjuntoQuimico, nombre, tipoProduco, peligro '/
  + registrarEmpleadoPrueba(int, int, int): boolean /' idEmpleado, idPrueba, idLaboratorio '/
  
  /' Metodos para Empleado Administrativo '/
  + establecerEstrategiaVencimiento(int, int, int, EstrategiaVencimiento) /' idSede, idLaboratorio, idPrueba, estrategiaVencimiento'/
  + laboratorioPuedeProbarProducto(int, int, int): boolean /' idSede, idLaboratorio, idProdQuimico '/
}

abstract class Entidad{
  - id: int
  
  + esPorId(int): boolean
  + equals(Object): boolean
  
  + <<constructor>> Entidad(GeneradorID) /' generadorID '/
}

class Sede extends Entidad{
  {static} - generadorID: GeneradorID
  - laboratorios: List<Laboratorio>
  - provincia: Provincia

  + agregarLaboratorio(int, Set<TipoPeligro>): Laboratorio /' capacidadPersonas, tipoPeligros'/
  + reservarPrueba(int, ProductoQuimico, int, EmpleadoTecnico, FechaTurno): PruebaLote /'idLaboratorio, productoQuimico, cantidadAuxiliares, empleadoResponsable, fechaTurno'/
  + buscarLaboratorio(int): Laboratorio /' idLab '/
  + obtenerGerenteDeSede(): Empleado
  + obtenerAdminDeSede(): Empleado
  + laboratorioPuedeProbarPruebaQuimica(int, ProductoQuimico): boolean /' idLaboratorio, produtoQuimico '/
  + registrarAyudanteAPrueba(EmpleadoTenico, int, int) /' empleado, idLaboratorio, idPrueba '/
  + establecerEstrategiaVencimiento(int, int, EstrategiaVencimiento) /' idLaboratorio, idPrueba, estrategiaVencimiento '/
  + finalizarPrueba(int, int, EstadoLote, estrategiaVencimiento) /' idLaboratorio, idPrueba, estadoLote, estrategiaVencimiento '/
  + obtenerPruebas(): List<PruebaLote>
  
  + <<constructor>> Sede(Provincia) /'provincia'/
}

enum Provincia {
  BUENOS_AIRES
  JUJUY
  etc
}

class ProductoQuimico extends Entidad {
  {static} - genradorId: GeneradorID 
  - formula: Map<ElementoQuimico, Integer> 
  - nombreComercial: String
  - tipoProducto: TipoProducto
  - peligros: Set<TipoPeligro>

  + esMismoTipo(ProductoQuimico): boolean /' prod '/
  
  + <<constructor>> ProductoQuimico(Map<EkementoQuimico, Integer>, String, TipoProducto, Set<TipoPeligro>) /' formula, nombreComercial, tipo, peligros '/
}

class PruebaLote extends Entidad{
  {static} - generadorId: GeneradorID
  - productoQuimico: ProductoQuimico
  - fechaFabricacion: LocalDate
  - responsable: EmpleadoTecnico
  
  - ayudantes: Set<EmpleadoTecnico>
  - auxiliaresRequeridos: int
  - estrategiaVencimiento: EstrategiaVencimiento
  - estado: EstadoLote
  
  + calcularFechaVencimiento(): LocalDate
  + calcularCostoPrueba(): double
  + registrarAyudante(EmpleadoTecnico)
  + establecerEstrategiaVencimiento(EstragiaVencimiento)
  + finalizarPrueba(EstadoLote, EstrategiaVencimiento) /' resultado, estrategiaVencimiento '/
  + habilitar()
  
  + <<constructor>> PruebaLote(ProductoQuimico, EmpleadoTecnico, auxiliaresRequeridos) /'productoQuimico, responsable, auxiliaresRequeridos'/
}

abstract class EstrategiaVencimiento extends Entidad{
  {static} - generadorID: GeneradorID 
  - descripcion: String
  
  + {abstract} calcularVencimiento(PruebaLote): LocalDate /' lote '/
  - <<constructor>> EstrategiaVencimiento(String) /'descripcion'/
}

class CriterioPeligrosidad extends EstrategiaVencimiento {}
class CriterioProducto extends EstrategiaVencimiento {}
class CriterioMolecular extends EstrategiaVencimiento {}


enum TipoProducto {
  LIMPIEZA
  PERFUMERIA
  MEDICAMENTO
}

enum EstadoLote {
  PENDIENTE
  ACEPTADO
  RECHAZADO
  FINALIZADO
}

enum Turno {
  '0 a 6hs'
  MADRUGADA
  '8 a 14hs'
  MAÑANA
  '16 a 22hs'
  TARDE
}

enum ElementoQuimico {
  HIERRO
  SODIO
  CALCIO
  AZUFRE
  
  + nroAtomico: int
  + simbolo: String
  + nombre: String
  
  + << constructor >> ElementoQuimico(int, String, String)
}

abstract class Empleado extends Entidad{
  {static} - generadorID: GeneradorID
  - nombre: String
  - username: String
  - idSedePertenece: int

  + soyTecnico(): boolean
  + soyAdministrativo(): boolean
  + soySoporte(): boolean
  + soyGerente(): boolean
  
  + << constructor >> Empleado(String, String, int) /' nombre, username, idSedePertence '/
}

'Edita todo lo relacionado con los puestos y gesetion del sistema (SysAdmin)
class EmpleadoSoporte extends Empleado {}

'Encargado de habilitar los empleados y laboratorios para las sedes
class EmpleadoAdministrativo extends Empleado {}

'Encargado de habilitar lotes y cambiar criterios de vencimiento
class EmpleadoGerente extends Empleado {}

'Encargado de realizar pruebas/reservas
class EmpleadoTecnico extends Empleado {
  - perfil: PerfilTecnico
  - contadorReservasMesActual: int
  + diagnosticarPrueba(PruebaLote): void
  
}

class PerfilTecnico {
  {static} - generadorID: GeneradorID
  - nombre: String
  - sueldo: double
  - maxReservas: int
  
  + <<constructor>> PerfilTecnico(String, double, int) /' nombre, sueldo, maxReservas '/
}

' Se puede reservar si: '
' - Cantidad de personas de mi prueba es <= la cantidad personas que tiene la prueba'
'   ya existente '
' - Toxicidades sean compatibles entre producto y laboratorio '
' - Tipo de producto compatible entre pruebas '
class Laboratorio extends Entidad{
  {static} - generadorID: GeneradorID
  - pruebas: Map<FechaTurno, PruebaLote[]>
  - capacidadPersonas: int
  - peligrosPermitidos: Set<TipoPeligro>
  'disponible devuelve true si hay una lugar disponible para una nueva prueba y,
  'en caso de haber otra prueba en curso, si el producto es compatible con mi prueba'
  + disponible(ProductoQuimico, int, FechaTurno): boolean /' productoQuimico, auxiliaresRequeridos, fechaTurno '/
  + reservar(ProductoQuimico, int, EmpleadoTecnico, FechaTurno): PruebaLote /' productoQuimico, auxiliaresRequeridos, EmpreadoResponsable, fechaTurno '/
  + calcularCostoPruebaTotal(int): double /' idLote '/
  + establecerPeligrosPermitidos(Set<TipoPeligros>) /' tiposPeligro '/
  + buscarLote(int): PruebaLote /' idLote '/
  + registrarAyudanteAPrueba(EmpleadoTecnico, int) /'empleadoTecnico, idPrueba'/
  + puedePribarProductoQuimico(ProductoQuimico): boolean /' productoQuimico '/
  + establecerEstrategiaVencimiento(int, EstrategiaVencimiento) /' idPrueba, estrategiaVencimiento '/
  + finalizarPrueba(int, EstadoLote, EstrategiaVencmiento) /'idLote, estadoLote, estrategiaVencmiento'/
  + obtenerPruebas(): List<PruebasLote>
  
  + <<constructor>> Laboratorio(int, Set<TipoPeligro>) /' CapacidadPersonas, tiposPeligro '/
}

class FechaTurno {
  fecha: LocalDate
  turno: Turno
  
  + equals(Object): boolean /'obj'/
  
  + <<constructor>> FechaTurno(LocalDate, Turno) /' fecha, turno '/
}

class TipoPeligro extends Entidad {
  {static} - generadorID = GeneradorID
  - nombre: String
  - costo: double
  + <<constructor>> TipoPeligro(String, double, int) /' nombre, costo, diasVencimiento '/
}
class TipoProducto  {
  {static} - genereadorID: GeneradorID 
  - nombre: String
  - diasVencimiento: int
  
  + <<constructor>> TipoProducto(String, int) /' nombre, diasVencimiento '/
}

Empresa "1" *--	"∞" Sede
Sede "1" *-- "∞" Laboratorio
Sede --- Provincia
Laboratorio "1" o-- "∞" TipoPeligro
Empresa "1" *-- "∞" TipoPeligro
Empresa "1" *-- "∞" TipoProducto
ProductoQuimico "1" o-- "∞" TipoPeligro
ProductoQuimico "1" --o "∞" PruebaLote
PruebaLote --- EstadoLote
Laboratorio "1" o-- "∞" FechaTurno
FechaTurno --- Turno
Laboratorio "1" *-- "∞" PruebaLote
ProductoQuimico "1" o-- "∞" ElementoQuimico
Empresa "1" *-- "∞" Empleado
PruebaLote "1" o-- "1" EstrategiaVencimiento
EmpleadoTecnico "1" o-- "1" PerfilTecnico
Empresa "1" *-- "∞" PerfilTecnico
Sede "1" o-- "1" EmpleadoAdministrativo
PruebaLote "1" --o "∞" EmpleadoTecnico
Empresa "1" *-- "∞" EstrategiaVencimiento
PruebaLote "1" o-- "1" TipoProducto

@enduml
